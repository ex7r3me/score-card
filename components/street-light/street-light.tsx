/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/street-light.glb -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, SpotLight } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { GroupProps } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
    Sphere: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

interface StreetLightProps extends GroupProps {
  on?: boolean
}


const StreetLight = (props: StreetLightProps) => {
  const { nodes, materials } = useGLTF('/street-light.glb') as GLTFResult
  const downLight: any = useRef()
  const upLight: any = useRef()

  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Cube.geometry} material={materials.Material} />
      <mesh geometry={nodes.Sphere.geometry} material={materials['Material.001']} position={[1.791, 5.477, 0]} scale={0.267} />
      { props.on && (
        <>
          <SpotLight ref={downLight} castShadow position={[1.791, 5.2, 0]} angle={Math.PI / 4 } distance={6} intensity={0.4} target-position={[0, -180, 0]} />
          <SpotLight ref={upLight} castShadow position={[1.791, 5, 0]} angle={Math.PI / 4} distance={0.1} intensity={0.3} target-position={[0, 180, 0]} />
        </>
      )}
    </group>
  )
}

export default StreetLight

useGLTF.preload('/street-light.glb')
